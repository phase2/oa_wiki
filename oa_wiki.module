<?php
/**
 * @file
 * Code for the OpenAtrium Wiki feature.
 */

include_once 'oa_wiki.features.inc';

/**
 * Implements hook_pre_features_rebuild().
 *
 * @see http://drupal.org/node/1549608
 */
function oa_wiki_pre_features_rebuild($component) {
  if ($component == 'user_permission') {
    drupal_static_reset('panelizer_entity_plugin_get_handler');
  }
}


/**
 * Implements hook_node_prepare().
 */
function oa_wiki_node_prepare($node) {
  if (empty($node->nid) && $node->type == 'oa_wiki_page' && module_exists('og_menu_single') && (function_exists('oa_core_get_section_context') && ($section = oa_core_get_section_context())) && ($plid = og_menu_single_get_link_mlid('node', $section))) {
    global $conf;
    // No good way to set default for parent.
    // @see menu_form_node_form_alter().
    $conf['menu_parent_oa_wiki_page'] = OG_MENU_SINGLE_MENU_NAME . ':' . $plid;
  }
}

/**
 * Implements hook_strongarm_alter().
 */
function oa_wiki_strongarm_alter(&$items) {
  // If workbench_moderation is enabled when oa_wiki is enabled, then we enable
  // moderation for oa_wiki_pages.
  if (module_exists('workbench_moderation')) {
    $node_options_name = "node_options_oa_wiki_page";
    if (isset($items[$node_options_name])) {
      $items[$node_options_name]->value[] = 'moderation';
      sort($items[$node_options_name]->value);
    }
  }
}

/**
 * Implements hook_modules_implements_alter().
 */
function oa_wiki_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'strongarm_alter') {
    // Move oa_wiki's implementation to the first one any other modules can
    // override our default easily if they don't want workbenech enabled.
    $group = $implementations['oa_wiki'];
    unset($implementations['oa_wiki']);
    $implementations = array_merge(array('oa_wiki' => $group), $implementations);
  }
}

/**
 * Implements hook_modules_installed().
 */
function oa_wiki_modules_installed($modules) {
  // If workbench_moderation gets enabled later, then we set the variable
  // manually so the user doesn't have to worry about reverting the feature.
  if (in_array('workbench_moderation', $modules)) {
    $node_options_name = "node_options_oa_wiki_page";
    $node_options = variable_get($node_options_name, array());
    $node_options[] = 'moderation';
    sort($node_options);
    variable_set($node_options_name, $node_options);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oa_wiki_form_oa_wiki_page_node_form_alter(&$form, &$form_state) {
  _oa_core_hide_comment_settings($form);
}

/**
 * Implements hook_init().
 */
function oa_wiki_init() {
  if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2) && ($node = menu_get_object()) && $node->type == 'oa_wiki_page') {
    if (($path = oa_wiki_node_uri($node)) && $path['path'] != $_GET['q']) {
      drupal_goto($path['path']);
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function oa_wiki_entity_info_alter(&$info) {
  if (!empty($info['node']['bundles']['oa_wiki_page'])) {
    $info['node']['bundles']['oa_wiki_page']['uri callback'] = 'oa_wiki_node_uri';
  }
}

/**
 * Change the URI to the file path for wikis.
 *
 * This only effects places that actually use entity_uri, whic is few but will
 * save a boostrap (no redirect needed) for those places that do.
 */
function oa_wiki_node_uri($node) {
  if (!($items = field_get_items('node', $node, 'field_oa_wiki_page_no_redirect')) || empty($items[0]['value'])) {
    if (($items = field_get_items('node', $node, 'field_oa_media')) && !empty($items[0]['uri']) && ($url = file_create_url($items[0]['uri']))) {
      return array('path' => $url);
    }
  }
  return node_uri($node);
}

/**
 * Implements hook_menu().
 */
function oa_wiki_menu() {
  $items = array();
  $items['wiki-upload'] = array(
    'access callback' => 'node_access',
    'access arguments' => array('create', 'oa_wiki_page'),
    'page callback' => 'oa_wiki_upload_page',
    'page title' => 'Upload',
    'type' => MENU_CALLBACK,
  );

  // @todo Access checks!
  $items['wiki-upload/multi/%oa_wiki_upload_multi_load'] = array(
    'title' => 'Create & Update Documents',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oa_wiki_upload_create_documents_form', 2),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'oa_wiki_page'),
  );
  return $items;
}

/**
 * Load callback for %media_multi placeholder in menu paths.
 *
 * @param string $fids
 *   Separated by space (e.g., "3 6 12 99"). This often appears as "+" within
 *   URLs (e.g., "3+6+12+99"), but Drupal automatically decodes paths when
 *   intializing $_GET['q'].
 *
 * @return array
 *   An array of corresponding file entities.
 */
function oa_wiki_upload_multi_load($fids) {
  return file_load_multiple(explode(' ', $fids));
}

/**
 * Media upload.
 */
function oa_wiki_upload_page() {
  module_load_include('pages.inc', 'file_entity');
  // Todo make this work with or without plupload
  if (module_exists('plupload') && module_exists('multiform')) {
    return drupal_get_form('file_entity_add_upload_multiple', array('wiki' => TRUE));
  }
  else {
    return drupal_get_form('file_entity_add_upload', array('wiki' => TRUE));
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for file_entity_add_upload_multiple.
 */
function oa_wiki_form_file_entity_add_upload_multiple_alter(&$form, &$form_state) {
  if (!empty($form_state['build_info']['args'][0]['wiki'])) {
    $form['#submit'][] = 'oa_wiki_file_entity_add_upload_multiple_submit';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for file_entity_add_upload_multiple.
 */
function oa_wiki_form_file_entity_add_upload_alter(&$form, &$form_state) {
  if (!empty($form_state['build_info']['args'][0]['wiki'])) {
    $form['#submit'][] = 'oa_wiki_file_entity_add_upload_submit';
    array_unshift($form['#submit'], 'oa_wiki_file_entity_add_upload_submit_first');
  }
}

/**
 * Force skipping the fields step to confirm with multi upload..
 */
function oa_wiki_file_entity_add_upload_submit_first($form, &$form_state) {
  global $conf;
  $conf['file_entity_file_upload_wizard_skip_fields'] = TRUE;
}

/**
 * Redirect to our form instead of edit files page.
 */
function oa_wiki_file_entity_add_upload_submit($form, &$form_state) {
  if (empty($form_state['rebuild']) && !empty($form_state['file'])) {
    $destination = array();
    if (isset($_GET['destination'])) {
      $destination = drupal_get_destination();
      unset($_GET['destination']);
    }
    $form_state['redirect'] = array('wiki-upload/multi/' . $form_state['file']->fid);
  }
}

/**
 * Redirect to our form instead of edit files page.
 */
function oa_wiki_file_entity_add_upload_multiple_submit($form, &$form_state) {
  $destination = array();
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }
  $form_state['redirect'] = array('wiki-upload/multi/' . implode(' ', array_keys($form_state['files'])), array('query' =>  $destination));
}


/**
 * Form callback; Create multiple documents.
 */
function oa_wiki_upload_create_documents_form($form, &$form_state, $files) {
  $form = array();
  $form['documents']['#tree'] = TRUE;
  $form['#files'] = $files;
  foreach ($files as $fid => $file) {
    // Just be sure they have access in case URL manipulation.
    if (!file_entity_access('view', $file)) {
      continue;
    }
    $form['documents'][$file->fid] = array(
      '#type' => 'fieldset',
      '#group' => 'files',
      '#title' => check_plain($file->filename),
    );
    $form['documents'][$file->fid]['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => $file->filename,
      '#weight' => $fid,
    );
    if ($node = oa_wiki_find_document($file)) {
      $form['#files'][$file->fid]->node = $node;
      $form['documents'][$file->fid]['update'] = array(
        '#type' => 'checkbox',
        '#title' => t('Update Document <a href="@url">@title</a> to file @filename?', array('@url' => url('node/' . $node->nid), '@title' => $node->title, '@filename' => $file->filename)),
        '#default_value' => 1,
        '#weight' => $fid - .5,
      );
      $form['documents'][$file->fid]['title']['#states'] = array(
        'invisible' => array(
          ':input[name="documents[' . $file->fid . '][update]"]' => array('checked' => TRUE),
        ),
      );
      //oa_wiki_update_document($node, $node->oa_wiki_row, $file);
    }
  }
  $form['create'] = array(
    '#value' => t('Process'),
    '#type' => 'submit',
  );
  return $form;
}


/**
 * Submit callback that creates or updates documents.
 */
function oa_wiki_upload_create_documents_form_submit($form, &$form_state) {
  foreach ($form_state['values']['documents'] as $fid => $values) {
    if (!empty($form['#files'][$fid])) {
      $file = $form['#files'][$fid];
      if (!empty($file->node->nid) && !empty($values['update'])) {
        oa_wiki_update_document(node_load($file->node->nid), $file->node->oa_wiki_row, $file);
      }
      else {
        oa_wiki_create_document($file, $values['title']);
      }
    }
  }
  $form_state['redirect'] = 'wiki-upload';
}

/**
 * Creates a document from a file.
 *
 * @param $file
 *   A file object.
 * @param $title
 *   The title of document.
 */
function oa_wiki_create_document($file, $title) {
  global $user;
  // Set the Space (og_group_ref) to the current Space Context. 
  // Set the Section (oa_section_ref) to the current Section Context.
  $node = (object) array(
    // Create oa_wiki.
    'type' => 'oa_wiki_page',
    'uid' => $user->uid,
    'name' => $user->name,
    // Add the file to the oa_media attachment field.
    'field_oa_media' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'fid' => $file->fid,
          'display' => 1,
          'description' => $title,
        ),
      ),
    ),
    'language' => LANGUAGE_NONE,
    // Set the Title of the Document node to the same title.
    'title' => $title,
  );
  node_save($node);
  drupal_set_message(t('Document @title created.', array('@title' => $node->title)));
}

/**
 * Update a document to a new file.
 *
 * @param $mode
 *   The node to update
 * @param $row
 *   The row in the database to update (with delta and language).
 * @param $file
 *   The file object
 */
function oa_wiki_update_document($node, $row, $file) {
  $node->field_oa_media[$row->language][$row->delta]['fid'] = $file->fid;
  // @todo this is getting saved as a draft :(.
  $node->revision = 1;
  $node->log = 'Update file via upload.';
  node_save($node);
  drupal_set_message(t('Document @title updated.', array('@title' => $node->title)));
}

/**
 * Find the document that may correspond to a given file.
 *
 * @param $file
 *   The file object to find.
 */
function oa_wiki_find_document($file) {
  $uri_ext = substr($file->uri, strrpos($file->uri, '.'));
  $uri_sans_ext = substr($file->uri, 0, strrpos($file->uri, '.'));
  $uri_after_underscore = substr($uri_sans_ext, strrpos($uri_sans_ext, '_') + 1);
  $uri_before_underscore = substr($uri_sans_ext, 0, strrpos($uri_sans_ext, '_'));
  $test_alt = $uri_before_underscore && strlen($uri_after_underscore) && is_numeric($uri_after_underscore);
  // This is not a renamed file, no existing document matches.
  if (!$test_alt) {
    return FALSE;
  }

  // We want to find all files on document with the same uri or prefix.
  $query = db_select('file_managed', 'f');
  $query->innerJoin('field_data_field_oa_media', 'm', 'm.field_oa_media_fid = f.fid ANd entity_type = :type', array(':type' => 'node'));
  $query->fields('m', array('delta', 'language'));
  $query->addField('f','uri');
  $query->addField('m', 'entity_id', 'nid');
  $query->condition(db_or()->condition('f.uri', $file->uri)->condition('f.uri', db_like($uri_before_underscore) . '%', 'LIKE'));

  if ($rows = $query->execute()->fetchAll()) {
    foreach ($rows as $row) {
      // Test if the db one is [uri].[ext] or [uri]_[numeric].[ext].
      $db_uri_ext = substr($row->uri, strrpos($row->uri, '.'));
      $db_uri_sans_ext = substr($row->uri, 0, strrpos($row->uri, '.'));
      if ($pos = strrpos($db_uri_sans_ext, '_')) {
        $db_uri_before_underscore = substr($db_uri_sans_ext, 0, $pos);
        $db_uri_after_underscore = substr($db_uri_sans_ext, strrpos($db_uri_sans_ext, '_') + 1);
      }
      else {
        $db_uri_before_underscore = $db_uri_sans_ext;
        $db_uri_after_underscore = FALSE;
      }
      if ($db_uri_before_underscore == $uri_before_underscore && $db_uri_ext == $uri_ext
        && (!$db_uri_after_underscore || is_numeric($db_uri_after_underscore))) {
        if (($node = node_load($row->nid)) && $node->type == 'oa_wiki_page' && node_access('update', $node)) {
          $node->oa_wiki_row = $row;
          return $node;
        }
      }
    }
  }
  return FALSE;
}
